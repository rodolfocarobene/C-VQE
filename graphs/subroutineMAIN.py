import copy
from collections import namedtuple

import numpy as np

def iterator_item_to_string(item):
    name = item[0]
    name += '_' + item[1]
    name += '_' + item[2][1]
    name += '_' + item[3][1]
    if item[4] == 'True':
        if item[5][0][0] != 'dummy':
            name += '_Lag_'
            for operator in item[5]:
                name += operator[0]+'('+str(np.round(operator[2], 2))+')'
    elif item[4] == 'Series':
        if item[5][0][0] != 'dummy':
            name += '_LagSeries_'
            for operator in item[5]:
                name += operator[0]+'_'+str(item[6])+'x'+str(np.round(item[7], 2))+'_'
    elif item[4] == 'AUGSeries':
        if item[5][0][0] != 'dummy':
            name += '_LagAUGSeries_'
            for operator in item[5]:
                name += operator[0]+'_'+str(item[6])+'x'+str(np.round(item[7], 2))
                name += '_lamb'+str(np.round(item[8], 2))+'_'

    return name

def from_item_iter_to_option(options, item):
    option = copy.deepcopy(options)
    option['molecule']['basis'] = item[0]
    option['var_form_type'] = item[1]
    option['quantum_instance'] = item[2][0]
    option['optimizer'] = item[3][0]

    if item[4] == 'True' or item[4] == 'False':
        if item[4] == 'True':
            lag_bool = True
        else:
            lag_bool = False
        option['lagrange']['active'] = lag_bool
        option['lagrange']['series'] = False
        option['lagrange']['augmented'] = False
        option['init_point'] = [None]
    elif item[4] == 'Series':
        option['lagrange']['active'] = True
        option['lagrange']['series'] = True
        option['lagrange']['augmented'] = False
    elif item[4] == 'AUGSeries':
        option['lagrange']['active'] = True
        option['lagrange']['series'] = True
        option['lagrange']['augmented'] = True


    option['lagrange']['operators'] = item[5]

    if item[5][0][0] == 'dummy':
        option['lagrange']['active'] = False

    option['series']['itermax'] = item[6]
    option['series']['step'] = item[7]
    option['series']['lamb'] = item[8]

    return option

def return_classical_results(mol_type):
    classical_calcs = namedtuple('exact_energy', ['fci', 'hf'])
    if mol_type == 'LiH':
        values = classical_calcs([-5.973316751407088, -7.13946546684442, -7.5971266588273565, -7.8148840686913355, -7.91651626942442, -7.959675149392178, -7.97246477898165, -7.969208055492757, -7.957758807530718, -7.9427411344971315, -7.9270537364715405, -7.912583029355404, -7.900470887976585, -7.891158087281481, -7.884473326516028, -7.87989737024568, -7.876852226660037, -7.874857448427652, -7.873562911195335, -7.872728412464138, -7.872193591411538, -7.87185276328741, -7.871636793108104, -7.8715007181019345], [-5.933995499851168, -7.1176806604554645, -7.577846509402896, -7.797113019388118, -7.899660568510614, -7.942463271807604, -7.953461619542778, -7.946949170263279, -7.93069699430651, -7.909159074306999, -7.885005868398116, -7.859922902861265, -7.835042767891952, -7.8111682124395525, -7.788872467273274, -7.768536317478177, -7.750364750442402, -7.734407915035468, -7.720593044233293, -7.708762419833688, -7.698709694621753, -7.690209426016897, -7.68303814269464, -7.4990304724007935])
    elif mol_type == 'H2O':
        values = classical_calcs([-71.60104569676616, -73.7539836029613,
                                  -74.7791146842303, -75.28750687358158,
                                  -75.54135743898377, -75.66396026613415,
                                  -75.71689664238885, -75.73222927190515,
                                  -75.72731015342738, -75.71195060328186,
                                  -75.69193108711775, -75.67075279958972,
                                  -75.65054204054096, -75.63252697639415,
                                  -75.61730032454582, -75.60499168302927,
                                  -75.59541304676448, -75.58819350221611,
                                  -75.58289292600809, -75.57908217640258,
                                  -75.57638754694894, -75.57450684146608,
                                  -75.57320780689791, -75.5723181706986,
                                  -75.57171330962431, -75.5713046752696,
                                  -75.57103018480773, -75.57084676210968,
                                  -75.57072477617947, -75.57064399854178,
                                  -75.57059071452504, -75.57055568536883],
                                 [-71.57783755483396, -73.7270054272365,
                                  -74.74880032019752, -75.2538925966075,
                                  -75.50410669492717, -75.62244292960645,
                                  -75.6702236616171, -75.6792640248499,
                                  -75.66667487034792, -75.64204112575229,
                                  -75.61095246094719, -75.57678821273724,
                                  -75.54166500564614, -75.50695559779757,
                                  -75.47357232878475, -75.44211993201797,
                                  -75.41297888806297, -75.38635512821654,
                                  -75.36231598568193, -75.34082168979688,
                                  -75.32175490396874, -75.3049474391129,
                                  -75.29020259275536, -75.27731230111539,
                                  -75.26606929172235, -75.25627506203153,
                                  -75.24774470227712, -74.88034210266622,
                                  -74.8776547296442, -74.84169656475353,
                                  -74.72185183054235, -74.87451879261279])
    elif mol_type == 'H3+':
        values = classical_calcs([3.1518111712329606, 0.7930249944681114,
                                  -0.23748138680009756, -0.7527805858030661,
                                  -1.0251057217763129, -1.1699429398436902,
                                  -1.2433092266100079, -1.2748268385778991,
                                  -1.2811879994251272, -1.2722647705355452,
                                  -1.2541321018359217, -1.2306719129030723,
                                  -1.2044585772543408, -1.1772556560041043,
                                  -1.1502958922569932, -1.1244398972305532,
                                  -1.1002689580616158, -1.078144480023318,
                                  -1.0582520399914652, -1.0406387409179958,
                                  -1.0252471289480645, -1.0119461452363505,
                                  -1.0005584080056462],
                                 [3.1627820184019644, 0.805610070387738,
                                  -0.22321436431273245, -0.7367229629714389,
                                  -1.007104547434058, -1.149785629827218,
                                  -1.220720644951825, -1.2494674834990795,
                                  -1.2526503411788528, -1.2400693045269733,
                                  -1.2177264183217722, -1.1894353848951131,
                                  -1.157714054111959, -1.1242888776973976,
                                  -1.0903826899967248, -1.0568801388727018,
                                  -1.0244247396564659, -0.9934786770804002,
                                  -0.9643624774246208, -0.9372833074829038,
                                  -0.9123563277190744, -0.8896216436058548,
                                  -0.8690585548963081])
    else:
        raise Exception("VALORI CLASSICI INCOMPLETI")

    return values

