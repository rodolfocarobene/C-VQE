import copy
from collections import namedtuple

import numpy as np

def iterator_item_to_string(item):
    name = item[0]
    name += '_' + item[1]
    name += '_' + item[2][1]
    name += '_' + item[3][1]
    if item[4] == 'True':
        if item[5][0][0] != 'dummy':
            name += '_Lag_'
            for operator in item[5]:
                name += operator[0]+'('+str(np.round(operator[2], 2))+')'
    elif item[4] == 'Series':
        if item[5][0][0] != 'dummy':
            name += '_LagSeries_'
            for operator in item[5]:
                name += operator[0]+'_'+str(item[6])+'x'+str(np.round(item[7], 2))+'_'
    elif item[4] == 'AUGSeries':
        if item[5][0][0] != 'dummy':
            name += '_LagAUGSeries_'
            for operator in item[5]:
                name += operator[0]+'_'+str(item[6])+'x'+str(np.round(item[7], 2))
                name += '_lamb'+str(np.round(item[8], 2))+'_'

    return name

def from_item_iter_to_option(options, item):
    option = copy.deepcopy(options)
    option['molecule']['basis'] = item[0]
    option['var_form_type'] = item[1]
    option['quantum_instance'] = item[2][0]
    option['optimizer'] = item[3][0]

    if item[4] == 'True' or item[4] == 'False':
        option['lagrange']['active'] = item[4]
        option['lagrange']['series'] = False
        option['lagrange']['augmented'] = False
        option['init_point'] = [None]
    elif item[4] == 'Series':
        option['lagrange']['active'] = True
        option['lagrange']['series'] = True
        option['lagrange']['augmented'] = False
    elif item[4] == 'AUGSeries':
        option['lagrange']['active'] = True
        option['lagrange']['series'] = True
        option['lagrange']['augmented'] = True

    option['lagrange']['operators'] = item[5]

    if item[5][0][0] == 'dummy':
        option['lagrange']['active'] = False

    option['series']['itermax'] = item[6]
    option['series']['step'] = item[7]
    option['series']['lamb'] = item[8]

    return option

def return_classical_results(mol_type):
    classical_calcs = namedtuple('exact_energy', ['fci', 'hf'])
    if mol_type == 'LiH':
        values = classical_calcs([-5.973316751407092, -6.727030739488288,
                                  -7.13946546684442, -7.410885835855126,
                                  -7.597126658827358, -7.725985544735766,
                                  -7.814884068691337, -7.875652564927888,
                                  -7.9165162694244176, -7.943195280450732,
                                  -7.95967514939218, -7.968761975357008,
                                  -7.972464778981656, -7.972249851370465,
                                  -7.969208055492761, -7.9641656147173325,
                                  -7.957758807530722, -7.950485471076731,
                                  -7.94274113449713, -7.934844340669629,
                                  -7.927053736471548, -7.919578458033593,
                                  -7.912583029355406, -7.90618832752589,
                                  -7.900470887976585, -7.895463316791598,
                                  -7.891158087281483, -7.887515339518235,
                                  -7.884473326516027, -7.881959101126991,
                                  -7.879897370245679, -7.87821656514827],
                                 [-5.933995499851168, -6.697234561594182,
                                  -7.1176806604554645, -7.390914707460707,
                                  -7.577846509402896, -7.70746147083358,
                                  -7.797113019388118, -7.85847294386209,
                                  -7.899660568510616, -7.926337553251482,
                                  -7.942463271807607, -7.950835567324477,
                                  -7.95346161954278, -7.951804963447007,
                                  -7.946949170263277, -7.939707384646695,
                                  -7.930696994306516, -7.920391751706345,
                                  -7.909159074306997, -7.897287302426051,
                                  -7.885005868398116, -7.87250024359475,
                                  -7.8599229028612685, -7.847401190339061,
                                  -7.835042767891952, -7.82293920754877,
                                  -7.811168212439553, -7.799794892637229,
                                  -7.788872467273269, -7.778442702008336,
                                  -7.768536317478178, -7.759173523064854])
    elif mol_type == 'H2O':
        values = classical_calcs([-74.78181443222093, -75.1370998930621,
                                  -75.330546084439, -75.44886550933379,
                                  -75.52626528201043, -75.57793038336048,
                                  -75.61152408873416, -75.63166529116192,
                                  -75.64167113533962, -75.64419341975582,
                                  -75.64143799717776, -75.6352426330087,
                                  -75.62710913570668, -75.6182201497951,
                                  -75.60945286030048, -75.60139840584084,
                                  -75.59439378456455, -75.58856825813204,
                                  -75.58389974953117, -75.58027217016003,
                                  -75.57752460244419, -75.575487057139,
                                  -75.57400222051484, -75.57293581621776,
                                  -75.5721793086881, -75.5716483003142,
                                  -75.57127901312236, -75.5710242946909,
                                  -75.57084988542645, -75.57073124775856,
                                  -75.57065102067251, -75.5705970512914],
                                 [-74.7469929442288, -75.09790783684886,
                                  -75.28617053730751, -75.39869915600165,
                                  -75.46990170777477, -75.51508451410187,
                                  -75.54190504206595, -75.55485954237544,
                                  -75.55707392254595, -75.55099130734216,
                                  -75.53862828971286, -75.52167767799183,
                                  -75.50156104224324, -75.47946431396966,
                                  -75.45636557508672, -75.4330574262383,
                                  -75.41016529291795, -75.3881634483264,
                                  -75.36739075811964, -75.34806762451285,
                                  -75.33031450851564, -75.31417132005821,
                                  -75.2996163785454, -75.2865836793277,
                                  -75.27497763520688, -75.26468499395428,
                                  -75.25558404044486, -75.24755142114749,
                                  -74.87830323081154, -74.87702858541117,
                                  -74.86443382322693, -74.82832581653365])
    else:
        raise Exception("VALORI CLASSICI INCOMPLETI")

    return values

